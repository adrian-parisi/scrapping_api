services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: zenrows-postgres
    environment:
      POSTGRES_DB: zenrows_api
      POSTGRES_USER: zenrows_user
      POSTGRES_PASSWORD: zenrows_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U zenrows_user -d zenrows_api" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - zenrows-network

  # ZenRows API Application
  api:
    build: .
    container_name: zenrows-api
    ports:
      - "8080:8080"
    environment:
      DATABASE_URL: postgresql://zenrows_user:zenrows_password@postgres:5432/zenrows_api
      API_KEY_PEPPER: dev-pepper-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./scripts:/app/scripts:ro # Mount scripts for database initialization
    networks:
      - zenrows-network
    restart: unless-stopped

  # Database initialization and seeding (runs once)
  db-init:
    build: .
    container_name: zenrows-db-init
    environment:
      DATABASE_URL: postgresql://zenrows_user:zenrows_password@postgres:5432/zenrows_api
      API_KEY_PEPPER: dev-pepper-key-change-in-production
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: [ "sh", "-c" ]
    command: >
      "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database migrations...' &&
        poetry run alembic upgrade head &&
        echo 'Seeding templates...' &&
        poetry run python scripts/seed_templates.py &&
        echo 'Database initialization complete!'
      "
    networks:
      - zenrows-network

volumes:
  postgres_data:


networks:
  zenrows-network:
    driver: bridge
